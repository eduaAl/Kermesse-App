@using KermesseApp.Models;

@{
    /*Instanciamos objetos y variables */
    KERMESSEEntities ke = new KERMESSEEntities();
    tbl_usuario tu = new tbl_usuario();
    tbl_rol_usuario tru = new tbl_rol_usuario();
    List<Vw_rol_opcion> listopc = new List<Vw_rol_opcion>();
    Int32 idRol = 0;
    String opcion = "";
    Int32 longitud = 0;
    Boolean acceso = false;

    /* Obtenemos la sesion */
    tu = Session["usuario"] as tbl_usuario;

    /* Obtenemos el rol del usuario*/
    tru = ke.tbl_rol_usuario.Where(x => x.id_usuario.Equals(tu.id_usuario)).FirstOrDefault();
    idRol = tru.id_rol;
    /* Obtenemos la lista de opciones del rol*/
    listopc = ke.Vw_rol_opcion.Where(x => x.id_rol.Equals(idRol)).ToList();

    string url = HttpContext.Current.Request.Url.AbsoluteUri;
    string[] separado = url.Split('/');
    string opcionActual = separado[separado.Length - 1];

    longitud = listopc.Count();//Obtenemos la cantidad de elementos
    for (int i = 0; i < longitud; i++)
    {
        //obtenemos la columna opcion de la matriz y/o lista de elementos
        opcion = listopc[i].opcion;
        if (opcionActual.Equals(opcion)) //COMPARAMOS LA OPCION ACTUAL CON CADA OPCIÓN DE LA MATRIZ
        {
            acceso = true; //ACCESO CONCEDIDO
            break;
        }
    }
    if (!acceso)
    {
        Response.Redirect("~/Home/Error");
    }
}

@model KermesseApp.Models.tbl_gastos
@{
    ViewBag.Title = "Guardar gastos";
}

<h2>Ingresar un nuevo gasto</h2>


@using (Html.BeginForm("GuardarGast", "Tbl_gastos", FormMethod.Post))
{
<div class="container">

    <h4>Gastos</h4>
    <div class="form-group row">
        @Html.LabelFor(x => x.id_kermesse, htmlAttributes: new { @class = "form-label mt-2 row" })
        @Html.DropDownListFor(model => model.id_kermesse, ViewBag.id_kermesse as SelectList, "Seleccione...", htmlAttributes: new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.id_kermesse, "", new { @class = "text-danger" })
    </div>

    <div class="form-group row">
        @Html.LabelFor(x => x.id_cat_gasto, htmlAttributes: new { @class = "form-label mt-2 row" })
        @Html.DropDownListFor(model => model.id_cat_gasto, ViewBag.id_cat_gasto as SelectList, "Seleccione...", htmlAttributes: new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.id_cat_gasto, "", new { @class = "text-danger" })
    </div>

    <div class="form-group row">
        @Html.LabelFor(x => x.fecha_gasto, htmlAttributes: new { @class = "form-label mt-2 row" })
        @Html.ValidationMessageFor(x => x.fecha_gasto, "", new { @class = "text-danger" })
        @Html.TextBoxFor(x => x.fecha_gasto, new { @class = "form-control" })
    </div>

    <div class="form-group row">
        @Html.LabelFor(x => x.concepto, htmlAttributes: new { @class = "form-label mt-2 row" })
        @Html.ValidationMessageFor(x => x.concepto, "", new { @class = "text-danger" })
        @Html.TextAreaFor(x => x.concepto, new { @class = "form-control" })
    </div>

    <div class="form-group row">
        @Html.LabelFor(x => x.monto, htmlAttributes: new { @class = "form-label mt-2 row" })
        @Html.ValidationMessageFor(x => x.monto, "", new { @class = "text-danger" })
        @Html.TextBoxFor(x => x.monto, new { @class = "form-control" })
    </div>

    <div class="container mt-3 col-xs-1" align="center">
        <div class="form-group">
            <input type="submit" value="Guardar" class="btn btn-success" />
            <input type="reset" value="Cancelar" class="btn btn-danger" />
            @Html.ActionLink("Regresar a la vista", "Vw_tbl_gastos", "", new { @class = "btn btn-primary" })
        </div>
    </div>

</div>
}

